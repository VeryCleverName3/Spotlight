//This is the js for the level editor

//Canvas stuff
var c = document.getElementById("mainCanvas");
var ctx = c.getContext("2d");
c.height = window.innerWidth / 2;
c.width = window.innerWidth;
var s = c.width;


//Update function
setInterval(update, 1000 / 60);
function update() {
    toolSelector();
    platformDrag();
}

//Mouse coords
var mx = 0;
var my = 0;

//String for code generated by the level editor
var level = "";

var rectangle = "";

var rectangleX = 0;
var rectangleY = 0;

ctx.fillRect(0, 0, s / 2, s / 2);

//Player placeholders for reference
var p1Reference = {
    x: s / 4,
    y: s / 2,
    size: 0.025 * s,
    draw: function(){
            ctx.fillStyle = "blue";
            ctx.fillRect(this.x - (this.size / 2), this.y -this. size, this.size, this.size);
    }
}
var p2Reference = {
    x: 3 * s / 4,
    y: s / 2,
    size: 0.025 * s,
    draw: function(){
            ctx.fillStyle = "blue";
            ctx.fillRect(this.x - (this.size / 2), this.y -this. size, this.size, this.size);
    }
}

p1Reference.draw();
p2Reference.draw();

onmousemove = function(e){
    mx = e.clientX;
    my = e.clientY;
}
/*
onkeydown = function(e){

    //L
    if(e.which == 76){
        level += "new LightSource(" + mx / s + " * s," + my / s + " * s);\n";
        ctx.fillStyle = "white";
        if(mx > s / 2){
            ctx.fillStyle = "black";
        }
        ctx.beginPath();
        ctx.arc(mx, my, s * 0.01, 0, 2 * Math.PI);
        ctx.fill();
        ctx.closePath();
    }

    //p
    if(e.which == 80){
        if (rectangle == "") {
            rectangle += "new PlatformNormal(" + mx / s + " * s, " + my / s + " * s, ";
            rectangleY = my / s;
            rectangleX = mx / s;
        } else {
            rectangle += "" + -(rectangleX - (mx / s)) + " * s, " + -(rectangleY- (my / s)) + " * s);\n";
            level += rectangle;
            rectangle = "";
            ctx.fillStyle = "white";
            if(mx > s / 2){
                ctx.fillStyle = "black";
            }
            ctx.fillRect((rectangleX * s), rectangleY * s, -((rectangleX * s) - mx), -((rectangleY * s) - my));
        }
    }
}*/



/* Eventually I want to have this so there is a 
 * "toolbar" of sorts that you can scroll through
 * and select tools. Right now its basically the
 * same functionality other than the drawing of
 * platforms is better in my opinion.
 * (I didn't have time to make it omnidirectional)
 * 
 * Is there a reason you didn't inherit main.js?
 * 
 * */
//Creating tool selector
var currentKey = null;
var rectW = 10;
var rectH = 10;
var eDown = false;

onkeydown = function (e) {
    currentKey = e.which;
}
onkeyup = function (e) {
    if (e.which == 69) {
        currentKey = null;
    }
}

function changeImage(k) {
    document.getElementById('currentTool').remove()
    var image = document.createElement('img');
    image.setAttribute("id", "currentTool")
    if (k == 69) {
        image.src = "images/platform.png";
    }
    else if (k == 76) {
        image.src = "images/light.png";
    }
    document.getElementById('body').appendChild(image); 
    console.log("hi");
}

function toolSelector() {
    if (currentKey == 69) {
        changeImage(69);
        if (eDown == false) {
            rectangleY = my;
            rectangleX = mx;
            eDown = true;
        }
    }
    else if (currentKey == 76) {
        changeImage(76);
        new LightSource(mx, my);
        currentKey = null;
    }
    else {
        eDown = false; //Prevents repeat of platformDrag w/o button held
    }
}

//Rectangle Tool
//Hold e to drag plaform
function platformDrag() {
    if (eDown) {
        rectH = Math.abs(my - rectangleY);
        rectW = -Math.abs(mx - rectangleX);
        new PlatformNormal(rectangleX, rectangleY, rectW, rectH);

    }
}